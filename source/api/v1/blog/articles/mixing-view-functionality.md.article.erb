Adding functionality to an object can be done by mixing a ruby module. I used this approach to add view formatting to a model object. In one of projects I was working on, requirement was to convert an article text from markdown to its html representation. Additionally some other transformations had to take place.

Since my initial feeling was applying markdown functionality is some form of extending object set of features, I decided to go with `obj.extend(module)` solution.

```ruby
def article
  params[:article].extend(ArticleMarkdownDecorator)
  params[:article].extend(ArticleRemoveOrphansDecorator)
end

module ArticleMarkdownDecorator
  def content
    do_something(super())
  end
end

module ArticleRemoveOrphansDecorator
  def content
    do_something(super())
  end
end
```

Whats important here is, where this code happens? All is done in [view layer](/#/blog/rails-view-layer), which is aware of mixing purpouse and circumstances. It has knowledge how and why to add functionality to other object.

Alternatively we could create formatting method that takes article content and returns markdowned text.

Ruby module can be shared across many usecases which is big advantage. Disadvantage I see is, we irreversibly modify an object.

I donâ€™t have strong opinion, yet I find this approach very interesting.
