Adding functionality to an object can be done by mixing in a ruby module. I used this approach to add a text formatting logic to a model object. In one of projects I was working on, requirement was to convert an article text from markdown to its html representation. Additionally some other transformations had to take place as well.

Since my initial feeling was that applying markdown functionality is some form of extending an object set of features, I decided to go with `obj.extend(module)` solution.

```ruby
def article
  params[:article].extend(ArticleMarkdownDecorator)
  params[:article].extend(ArticleRemoveOrphansDecorator)
end

module ArticleMarkdownDecorator
  def content
    do_something(super())
  end
end

module ArticleRemoveOrphansDecorator
  def content
    do_something(super())
  end
end
```

What is important here is where this code happens? All is done in a [view layer](/#/blog/rails-view-layer). View layer has knowledge why and how to add functionality to an object, yet not poluting whole system.

Alternatively we could create formatting method that takes an article's content and return markdowned text.

A ruby module can be shared which is a big advantage (same as a method approach). The only disadvantage I see is, we irreversibly modify an object, thou this object is already in a view layer so at the end of execution flow.

Very interesting.
