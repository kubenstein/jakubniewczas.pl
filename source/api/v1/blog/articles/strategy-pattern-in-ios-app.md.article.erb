Recently, I was working on an IOS project, that one of functionalities was to present a clock but in a form of specially calculated and drew bézier shapes.
I split logic of the app into several objects, each responsible for an individual part. In iOS we have a concept of ViewControllers which, unfortunately, are often interpreted as a place for both, View and Controller logic. I prefer to keep those two things separated. In the project, I planned to add one more collaborator - an object that only calculates data required to draw a bézier shape. What is important here, the object doesn’t actually draw any shape. It just generates a list of bézier points (point itself and a corresponding control point). All sounds reasonable but there is a one more thing worth mentioning. The separation was made not only to meet SRP requirements but mostly because, the problem was identified, upfront, as a Strategy Pattern and implemented in a such way.

### Interface/Protocol
With unified interface each strategy implements, I could depend on this abstraction in other part of the application codebase and not any particular Strategy class. I also introduced an `Abstract Factory` object that provides proper strategy in a clear and managable way. In fact, for this particular app, the Factory class also acts as an Iterator. Basically we switch strategies in a cyclic order.

Code that is responsible for whole process of switching strategy looks like this:

```objc
@implementation ClockViewController
#...
- (IBAction)nextStrategyButtonTapped:(id)sender {
    [self.strategiesFactory nextStrategy];
    [[self customView] setStrategy:[self strategy]];
}

#...
- (ClockView *)customView {
    return (ClockView *)self.view;
}

- (id<CoordinatesStrategyProtocol>)strategy {
    return [self.strategiesFactory strategy];
}
@end
```

CoordinatesStrategyFactory.m:

```objc
@interface CoordinatesStrategyFactory ()
@property(nonatomic, strong, readonly) NSArray *strategies;
@property(atomic, assign) NSInteger currentStrategyIndex;
@end

@implementation CoordinatesStrategyFactory
- (id)init {
    self = [super init];
    _currentStrategyIndex = 0;
    [self populateList];
    return self;
}

- (void)nextStrategy {
    self.currentStrategyIndex++;
    if(self.currentStrategyIndex >= [self.strategies count]) {
        self.currentStrategyIndex = 0;
    }
}

- (id<CoordinatesStrategyProtocol>)strategy {
    return self.strategies[self.currentStrategyIndex];
}

#pragma mark private

- (void)populateList {
  #...
}
@end
```

At first `populateList` method was implemented just as a hardcoded list.

```objc
- (void)populateList {
    _strategies = @[
                    [[CircularTimeBasedCoordinatesStrategy alloc] init],
                    [[LinearTimeBasedCoordinatesStrategy alloc] init],
                    [[MixedCoordinatesStrategy alloc] init],
                  ];
}
```

Later on, just to decouple things even more, I used objC runtime library abilities. Any class that implements `CoordinatesStrategyProtocol` is discovered automatically and made available for the Factory.

### Design Patterns
Recently I keep diving into Design Patterns all over again. I found them very useful because of two things:

* First, they actually solve your problem,
* Second, they are programmers vocabulary.

When we have things named, and we all use same naming, we can talk about those things and solutions they bring. We can see possible solutions just by recognising patterns in a given problem. Often though, we organically achieve same results. What are possible solutions to the need of having different drawing strategies? `If`s or polymorphism! But by recognising and understanding each design pattern, we gain confidence in short-term results and long-term consequences. A few decades of making mistakes to find some general hints, why not use them!
