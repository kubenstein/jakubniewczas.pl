One of functionality in my recent iOS project was to render a bézier shapes based peculiar clock...

In iOS we have a concept of ViewControllers which, unfortunately, are often interpreted as a place for both, View and Controller logic. I prefer to keep those two things separated. In the project, I planned to add one more collaborator - an object that only calculates data required to draw a bézier shape. What is important here, the object doesn’t actually draw any shape. It just generates a list of bézier points (point itself and a corresponding control point). The separation was made not only to meet SRP requirements but mostly because, the problem was identified, upfront, as a <i>Strategy Design Pattern</i> and implemented in a such way.

### Interface/Protocol
Unified Protocol, basically an Interface, is a key allowing plugging different Strategy objects. I introduced also an `Abstract Factory` object that provides proper strategy and hides initialization details in a clear and managable way. In fact, for this particular app, the Factory class also acts as an Iterator. Basically we switch strategies in a cyclic order.

Code responsible for switching strategies:

```objc
@implementation ClockViewController
#...
- (IBAction)nextStrategyButtonTapped:(id)sender {
    [self.strategiesFactory nextStrategy];
    [[self customView] setStrategy:[self strategy]];
}

#...
- (ClockView *)customView {
    return (ClockView *)self.view;
}

- (id<CoordinatesStrategyProtocol>)strategy {
    return [self.strategiesFactory strategy];
}
@end
```

CoordinatesStrategyFactory.m:

```objc
@interface CoordinatesStrategyFactory ()
@property(nonatomic, strong, readonly) NSArray *strategies;
@property(atomic, assign) NSInteger currentStrategyIndex;
@end

@implementation CoordinatesStrategyFactory
- (id)init {
    self = [super init];
    _currentStrategyIndex = 0;
    [self populateList];
    return self;
}

- (void)nextStrategy {
    self.currentStrategyIndex++;
    if(self.currentStrategyIndex >= [self.strategies count]) {
        self.currentStrategyIndex = 0;
    }
}

- (id<CoordinatesStrategyProtocol>)strategy {
    return self.strategies[self.currentStrategyIndex];
}

#pragma mark private

- (void)populateList {
  #...
}
@end
```

At first `populateList` method was implemented as a hardcoded list.

```objc
- (void)populateList {
    _strategies = @[
                    [[CircularTimeBasedCoordinatesStrategy alloc] init],
                    [[LinearTimeBasedCoordinatesStrategy alloc] init],
                    [[MixedCoordinatesStrategy alloc] init],
                  ];
}
```

Later on, I switched to useing objC runtime library abilities to decouple things even more. Any class that implements `CoordinatesStrategyProtocol` is discovered automatically and made available for the Factory.

### Design Patterns
Recently I keep diving into Design Patterns all over and over again. They are extremely useful:

* First, they actually solve your problem,
* Second, they are programmers vocabulary.

Naming things and using same vocabulary allows us to talk about those problems and solutions with other devs. We also can see possible solutions just by recognising patterns in a given problem.
But by recognising and understanding each design pattern, we gain confidence in short-term results and long-term consequences. A few decades of trials and errors to find some general hints and guidelines, why not use them!
