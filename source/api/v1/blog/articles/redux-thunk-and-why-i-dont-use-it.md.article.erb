It wont take long for those starting playing with react-redux, to also start wondering how to deal with asynchronous actions. This is where [Redux-Thunk](https://github.com/reduxjs/redux-thunk) comes in. It allows us to dispach more than one action. In short, thanks to the redux-thunk middleware, you have an access to the `dispatch` method in your action creators. Basically instead of an action we have to return a function. That function will accept `dispatch` as an argument giving us ability to to dispatch multiple actions from a single action creator. See an example how to dispatch multipe actions synchronously and asynchronously.

```javascript
function actionCreator() {
  return dispatch => {
    dispatch(actionA());

    setTimeout(() => {
      dispatch(actionB());
    }, 2000);
  };
}

```

#### Why I don't like it
Higher-order functions are common in JS, so what’s wrong with this? Nothing, there is nothing wrong with it from a language perspective. However there is a little issue I have with a semantic part of the solution. Lets take a look at an example from one of my project.

I had to add a `concert`. Adding a concert required a call to a backend and only when it is saved, I can consider a concert as added.

```javascript
function addConcert(concert) {
  return dispatch => {
    validate(concert)
    .then(validConcert => sendRequest(validConcert))
    .then((addedConcert) => {
      dispatch(ConcertsEvents.added(addedConcert));
    });
  };
}

```

and the usage:

```javascript
this.props.dispatch(addConcert(concert));
```

Problem I have is very subtle, `dispatch` doesn’t dispatch anything. It will be eventually used for dispatching but when I read the code invocation I expect it to actually do something. What values dispatch accepts in this example? We expect some event, best guess would be `concertAdded`, `concertToAdd` or something similar but nothing like this is dispatched there.

That semantic issue started to worry me. Problem with readability is way grater than benefits of a syntax sugar.

On the other hand:

```javascript
addConcert(concert, this.props.dispatch);
```

reads very well. “To add a concert I need to call `addConcert` method, with a concert object and some dependency”.

```javascript
function addConcert(concert, dispatch) {
  return validate(concert)
    .then(validConcert => sendRequest(validConcert))
    .then((addedConcert) => {
      dispatch(ConcertsEvents.added(addedConcert));
      return addedConcert;
    });
}
```

So to sum things up, Redux Thunk is a nice tool, but in my opinion a boilerplate code reduction comes with too great loss in a code readability and flexibility.
