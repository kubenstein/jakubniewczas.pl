As part of micro optimisations of my everyday dev life I try to automate more and more tasks as well as create keyboard shortcuts for actions I do frequently.

VS Code is beautifully configurable and you can bind nearly any action to any key shortcut.
Unfortunately when I tried to bind multiple commonly used actions I quickly realised Im running out of keys, free key slots are too far where I cant reach easily, or keys combos are two difficult thus inconvenient.

Inspired by Vim, I wanted to replicate modes mechanism in VS Code. I wanted to be able to enable and disable a special mode in which each key can be a shortcut. It would solve all problems I wrote earlier and the price would be just linear penalty of the need to enable and disable that special mode.
Thats why I started working on my first VS Code extension:


![KeybindingMode, Jakub Niewczas](<%= s3_url('blog/vs-code-extension-keybinding-mode/keybinding-mode.jpg') %>)


"`KeybindingMode` is a VS Code extension allowing you to bind commands to just a single letter on your keyboard. Gain 48 easy accessible keybinding slots as an alternative to complicated keybinding combos!"

#### Usage
By double pressing "\`" (you can configure your own shortcut) the editor will be switched to a special mode in which typing is disabled and keys act as command shortcuts. On the extension settings page you can bind commands to any letter. Double pressing "\`" again will disable special mode.
The toast notification is shown every time the mode is switched.

#### Configuration
To configure how to enter Keybinding Mode look for Toggle Keybinding Mode (`keybindingMode.toggle`) keyboard shortcut in VS Code keybindings settings. By default it is set to double "\`".
To configure which command is assigned to which letter, go to the extension settings:

VS Code Settings -> Extensions -> KeybindingMode -> "Letter Command Mapping".

Add mapping in a format of:
```
<letter>,<command>.
```

#### Demos

##### Demo 1 - toggling windows
In this demo I bound sidebar toggling, git blame and git graph functionalities to `a`, `t` and `g` keys using the following config:
```
a,workbench.action.toggleSidebarVisibility
t,gitlens.toggleFileBlame
g,git-graph.view
```

![Demo 1 - toggling windows](<%= s3_url('blog/vs-code-extension-keybinding-mode/demo1.gif') %>)


##### Demo - switching tabs
In this demo I bound tabs-related functionalities, such as focusing editors and screen splitting.

```
1,workbench.action.previousEditorInGroup
2,workbench.action.nextEditorInGroup
3,workbench.action.focusPreviousGroup
4,workbench.action.focusNextGroup

t,workbench.action.moveEditorToAboveGroup
g,workbench.action.moveEditorToBelowGroup
h,workbench.action.moveEditorToRightGroup
f,workbench.action.moveEditorToLeftGroup
```

![Demo 2 - tabs](<%= s3_url('blog/vs-code-extension-keybinding-mode/demo2.gif') %>)



#### Links
[https://github.com/kubenstein/keybinding-mode](https://github.com/kubenstein/keybinding-mode)