During recent years we can see significant increase in interest in static pages. Simplicity in hosting mixed with ability to still build fully dynamic pages are key points in deciding to go for this solution. From ruby stack I usually use [middleman](https://middlemanapp.com/).
I’ve always seen many advantages of splitting code into smaller components and trying to keep proper layering, I’m recently even more interesting in [DDD](https://en.wikipedia.org/wiki/Domain-driven_design) approach. Promise of separation of persistence and business logic and ability to change each layers independently, is something that really attracts my attention.
Many concepts from DDD are mixed in Rails world into single class, making things really hard to change later.

Middleman offers yml based form of storing data inside a template. Quite soon I realised it would be convenient just to have OO representation of that data. I started by introducing Repository with hardcoded list of OpenStructs.

```ruby
module Ak
  class NewsRepository
    def all
      [
        OpenStruct.new(title: ‘news 1’),
        OpenStruct.new(title: ‘news 2’)
      ]
    end
  end
end
```

This is all you need to fetch objects. Repository defines business interface. In this case it is quite generic `all` but thats exactly what, from page perspective, is expected.

Later on, I changed OpenStruct to PORO to have more control over params. Now having Entities ready, you can iterate over them and just ask for well defined attributes.

```ruby
def all
  [
    News.new(title: 'news 1'),
    News.new(title: 'news 2')
  ]
end

Ak::NewsRepository.new.all.each do |news|
  puts news.title
end
```

With data source fully functional, whole middleman binding can be finished.
I used helper methods as some form of factories. I also consider those helpers as a gluing layer. This is the point where we call domain logic.

```
def news
  Ak::NewsRepository.new.all
end
```

### Inversion of Dependencies
Interesting to notice is, who is actually calling who? Middleman is calling our logic, which means, we are no longer depending on 3rd party tools. It is generally better when framework calls your code than your code calls framework. Who supposed to serve who actually!

###Back to Repository
We can provide real data without changing anything related with middleman. I went for Yml file as a datastorage, since most of data was already prepared in that format. For testing purposes, I preferred to have also in-memory data storage. So thats how Adapter layer was introduced.

```
module Ak
  class NewsRepository
    def initialize(adapter: YmlAdapter.new(ymls_dir_path: 'db/'))
      @adapter = adapter
    end

    def all()
      raw_data = @adapter.load_data(:news)
      raw_data.map { |data| News.new(data) }
    end
  end
end
```

Difference between a repository interface and an adapter one is repository speaks business language: `all`, `all_comments_for_article`, `all_sorted_descending`, while adapter uses persistence or data structure vocabulary: `load_data`, `flush`, `add`, `remove`, etc.

###Interfaces in Ruby
All adapters need to answer the same set of methods. This is typical example of an `Interface`. I decided to build a module that has same purpose. Probably most of Rails devs will banish me for this but I still see great value, mosty in providing hints and guidelines.

Additionally I preferred to have `defaultAdapter` defined somewhere, so I can change it for testing purposes. I came up with that structure:

```ruby
module Adapters
  def self.default
    @default_adapter ||= YmlAdapter.new(ymls_dir_path: 'db/')
  end

  def self.default=(adapter)
    @default_adapter = adapter
  end

  module Adapterable
    def load_data(resources_name)
    end

    def clear(resources_name)
    end

    def add_data(resources_name, data:)
    end
  end
end
```

Example of a repository initializer:
```ruby
module Ak
  class ConcertsRepository
    def initialize(adapter: Adapters.default)
    end

    #...
  end
end
```

And an in-memory adapter:
```ruby
class MemoryAdapter
  include Adapters::Adapterable

  def load_data(resources_name)
    (db[resources_name] ||= [])
  end

  def clear(resources_name)
    db[resources_name] = []
  end

  def add_data(resources_name, data:)
    (db[resources_name] ||= []) << data
  end

  def db
    @db ||= {}
  end
end
```

What is also worth noticing here is, Repositories are within AK module (AK is a product code), while adapters are not. The reason of that is adapters are not part of domain/business logic.

### What about Middleman?
Exactly! Thats the most surprising and fun fact! We can talk about, and work on the application while nearly forgetting about Middleman. It is just a plugin, somehwere at the end of a chain.

You can check whole codebase on [Github](https://github.com/kubenstein/aleksandrakuls.com).
