During recent years we can see significant increase in interest in static pages. Hosting static pages is extremely simple, yet we don't have to compromise on dynamic and convenient dev environment. For ruby stack I usually use [Middleman](https://middlemanapp.com/).

I’ve always seen many advantages of splitting code into smaller components and trying to keep proper layering, so DDD approach is very interesting for me. Promise of separation of persistence and business logic and ability to change each layer independently, is something that really excites me.
Many concepts DDD explicitly separate are mixed togather in Rails world within single class.

Middleman offers yml-based form of storing data inside a template but I quickly realised it would be much convenient just to have OO representation of data. I started by introducing a `Repository` with hardcoded dummy list of `OpenStruct`s.

```ruby
module Ak
  class NewsRepository
    def all
      [
        OpenStruct.new(title: ‘news 1’),
        OpenStruct.new(title: ‘news 2’)
      ]
    end
  end
end
```

`NewsRepository` provides `all` method that will be utilised by a page. Thanks to Repository layer, pages dont't have to worry where the data come from.

Next step was to changed OpenStruct to PORO to have more control over params. Having Entities ready, we can iterate over them and use api they expose.

```ruby
def all
  [
    News.new(title: 'news 1'),
    News.new(title: 'news 2')
  ]
end

Ak::NewsRepository.new.all.each do |news|
  puts news.title
end
```

With data source fully functional, whole middleman binding can be finished.
I used helper methods as some form of factories. I also consider those helpers as a gluing layer. This is the point where we call domain logic.

```
def news
  Ak::NewsRepository.new.all
end
```

### Inversion of Dependencies
Interesting aspect to notice is: who is actually calling who? Middleman is calling our logic, which means, our code is no longer depending on any 3rd party tools. It is generally better when a framework calls your code than your code calls a framework. Who supposed to serve who actually!

### Back to Repository
We can switch to provide real data without changing much in the app and nothing in Middleman. For production data I use Yml becasue most of data were already prepared in that format. For testing purposes, I prefer in-memory data storage. New layer has to be introduced: Adapter.

```
module Ak
  class NewsRepository
    def initialize(adapter: YmlAdapter.new(ymls_dir_path: 'db/'))
      @adapter = adapter
    end

    def all()
      raw_data = @adapter.load_data(:news)
      raw_data.map { |data| News.new(data) }
    end
  end
end
```

Difference between a repository interface and an adapter one is, repository speaks business language: `all`, `all_comments_for_article`, `all_sorted_descending`, while adapter uses persistence or data structure vocabulary: `load_data`, `flush`, `add`, `remove`, etc.

### Interfaces in Ruby
All adapters need to answer the same set of methods. This is typical example of an `Interface`. I decided to build a module that serves such a purpose. Not very popular in Rails world but I still see its great value - Providing hints and guidelines for devs.

I also prefer to have `defaultAdapter` defined somewhere. Structure I came up with:

```ruby
module Adapters
  def self.default
    @default_adapter ||= YmlAdapter.new(ymls_dir_path: 'db/')
  end

  def self.default=(adapter)
    @default_adapter = adapter
  end

  module Adapterable
    def load_data(resources_name)
    end

    def clear(resources_name)
    end

    def add_data(resources_name, data:)
    end
  end
end
```

Example of a repository initializer:
```ruby
module Ak
  class ConcertsRepository
    def initialize(adapter: Adapters.default)
    end

    #...
  end
end
```

And an in-memory adapter:
```ruby
class MemoryAdapter
  include Adapters::Adapterable

  def load_data(resources_name)
    (db[resources_name] ||= [])
  end

  def clear(resources_name)
    db[resources_name] = []
  end

  def add_data(resources_name, data:)
    (db[resources_name] ||= []) << data
  end

  def db
    @db ||= {}
  end
end
```

Repositories are within AK module (AK is a product code and namespace), while adapters are not. The reason is, adapters are not part of a domain/business logic.

### What about Middleman?
Exactly! That's the most surprising and fun fact! We can talk about and work on the application while nearly completely forgetting about Middleman. It is just a plugin, somehwere at the end of a chain.

Check whole codebase on [Github](https://github.com/kubenstein/aleksandrakuls.com).
