.header-section
  .main-header
    h1 Jakub Niewczas
    h2 translate="HEADLINE"
about-me-section

.skills-section.with-separator
  .section-title
    span.title
      | {{ 'SKILLS_TITLE' | translate }}
  .section-body
    h2 Programming skills beyond technologies - the Art of building software.
    p.item-body.justified
      | <br>
      | Programming, as every discipline, requires knowledge and experience. Gaining knowledge often starts at some educational institutions, but it is always followed by countless hours of reading and practising. While operational knowledge is a must, because at the end, its all about ability to deliver working software, understanding programming principles is extremely important also.<br>
      | I have been focusing on those areas of programming for quite a while, searching for materials and studding from, for example, books like:<br>
      | <br>
      |   - Growing Object-Oriented Software, Guided by Tests<br>
      |   - Clean Code: A Handbook of Agile Software Craftsmanship<br>
      |   - Domain-Driven Design: Tackling Complexity in the Heart of Software<br>
      |   - Practical Object-Oriented Design in Ruby<br>
      |   - 99 Bottles of OOP<br>
      |   - Refactoring: Improving the Design of Existing Code<br>
      | <br>
      | I learnt that so many problems we have nowadays have been diagnosed, classified and solved already in the past. There are ideas, guidelines and heuristics that are above any particular language or technology. Experience in writing a clean and maintainable code can be applied to a new platform or a framework as well. Following rules of, wonderfully described as a ‘growing’ software, your code is ready for a change in requirements, no matter it is Ruby, front/back-end JS or iOS application. This freedom requires discipline, knowledge and care. Those are attitudes of a true senior developer.<br>
      | <br>
      | I value both sides. An operational - which is more like an craftsmanship. All libraries, tools, tricks, a massive knowledge about a language environment. And a strategic one - the art of building software. Architectures, disciplines, patterns, consciousness trade offs and what is the most important - specially shaped general way of thinking.<br>
      | <br>
      | At <a class='link' href='/#/blog' target='_blank'>my blog</a> you can read articles both about very specific tricks and toolsets, as well as more generic topics. Even though an application has to be written in some technology, in my case mostly Ruby or JS, I often try to abstract my thinking from it and tools from its community when designing systems. Please also feel free to check my <a class='link' href='https://twitter.com/j_niewczas' target='_blank'>Twitter</a>. It is full of interesting, short and frequent updates and observations from my everyday tech life.<br>
      | <br>
      | All those things keep my mind sharp, encouraging to always think in an algorithmic, language-agnostic way, focusing on facts, consciousness trade offs and all implications. Honesty of programming details and a beauty of designing whole systems will never stop facinating me.<br>
      | <br>
      | Read, practice, read, practice, read, practice...<br>
      | <br>
      | Jakub Niewczas

education-section
footer-section
